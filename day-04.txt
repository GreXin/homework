# JS Day03

## 1 . 构造函数的问题

### 1.1 构造函数过程

>    new的执行过程
>
>    创建一个空对象
>
>    ​    让this指向这个空对象
>
>    ​     执行构造对象的代码，给这个对象添加属性和方法
>
>    ​     返回这个对象   return this

- 构造函数体现了面向对象的封装特性
- 构造函数实例化创建的对象彼此独立，互不影响

### 1.2 存在的问题

- 会有一个浪费内存的问题，每创建一个对象，都会在堆内存中开辟一个空间存储方法
- 我们常说的指针/指向==> 表示内存里面的地址（门牌号/房间号） 这个地址指向了内存中数据真实的位置

![数据地址指向](C:\Users\CICI\Desktop\tup\数据地址指向.png)

## 2 . 解决方法

### 2.1引入原型解决

#### 2.1.1公共属性写道构造函数里

```js
function Star(uname, age) {
  this.uname = uname
  this.age = age
  // this.sing = function () {
  //   console.log('唱歌')
  // }
}
```

#### 2.1.2 公共方法写在原型对象上 ——节约了内存

```js
Star.prototype.sing = function () {
  console.log('唱歌')
}
const ldh = new Star('刘德华', 25)
const zxy = new Star('张学友', 18)
ldh.sing() //调用
zxy.sing() //调用
// console.log(ldh === zxy)  // false
// sing是方法, 在内存里面开辟了不同空间
console.log(ldh.sing === zxy.sing)
```

## 3 . 原型

### 3.1 prototype🔥🔥

> 原型的意思是 原始的模型
>
> 在JS里面：原型就是一个对象“也叫原型对象”
>
> 原型对象：Person.prototype



#### 3.1.1 所有的函数 ，都有一个prototype属性（显示原型）。属性值是一个指针，指向原型对象

```js
 function fn() { }
    console.dir(fn)
```

![1664088789540](C:\Users\CICI\Desktop\tup\1664088789540.jpg)

#### 3.1.2 原型对象上默认有一个 constructor   属性指向这个函数本身

```js
 function Person(name) {
            this.name = name
        }
        console.dir(Person)
  // Person.prototype 是一个对象（原型对象）
  // Person.prototype 是一个对象 ==>{constructor：Per       
```



![1664089153370](C:\Users\CICI\Desktop\tup\1664089153370.png)



#### 3.1.3 我们可以往这个原型对象上添加属性和方法

```js

// ==> 所有通过构造函数创建的实例，都共享原型对象上的属性和方法
        function Star(name, age) {
            this.name = name
            this.age = age
            this.sing = function () {
                console.log('rap')
            }
        }
        // 公共的方法写到原型上
        Star.prototype.sing = function () {
            console.log('rap')
        }


        // ===> 原型上也可以添加属性

        Star.prototype.cheer = 'Every step count !'
```

### 3.2 constructor 属性🔥🔥

#### 3.2.1 在哪里 

> 每个原型对象里都有个constructor 属性（constructor 构造函数）

![1664096762128](C:\Users\CICI\Desktop\tup\1664096762128.png)

#### 3.2.2作用

> 每一个原型(对象)都有一个constructor属性,指回构造 函数本身
>
> 表示 ==> 我,我这个原型,和哪个构造函数相关联,是哪个构造函数的原型

####  3.2.3constructor应用

>  我们直接给原型对象赋值一个对象,相当于替换了原型对象里的所有内容

```js
 Star.prototype = {
            // 表示这个原型对象,是哪个构造函数的原型,和哪个构造函数相关联
            constructor: Star,
            Sing: function () {
                console.log('唱')
            },
            dance: function () {
                console.log('跳')
            },
            rap: function () {
                console.log('rap')
            }
        }
        const ldh = new Star('蔡徐坤')
        console.log(ldh)
```

> 如果有多个对象的方法，我们可以给原型对象采取对象形式赋值
>
> 但是这样就会覆盖构造函数原型对象原来的内容，这样修改后的对象就不再指向当前构造函数
>
> 此时，我们可以在修改后的原型对象中，添加一个constructor指向原来的构造函数

### 3.3  ___ proto ___ 🔥🔥

> 所有的对象都有__proto__(隐式原型),属性值是一个对象(原型对象)
>
> 所有的对象__proto__(隐式原型)指向它的构造函数prototype(显示原型)

```js
 	  function Star(name, age) {
            this.name = name
            this.age = age
        }
        Star.prototype.sing = function () {
            console.log('唱歌')
        }
        const ldh = new Star('刘德华')
        console.log(ldh)
	
		console.log(Star)
     console.log(ldh.__proto__ === Star.prototype)
```

因为函数也是属于对象的,所以函数也有 _ _proto_  _ 属性

#### 3.3.1 _ _proto_ _的作用

> ==> 它相当于一个桥梁<实例通过__proto__就可以访问到它的原型对象

#### 3.3.2 方法属性的查找规则

> 首先看ldh本身有没有要找的属性和方法， 如果有，直接拿来使用。 如果没有就通过ldh.__proto 找到它的原型， 去看原型上是否有需要的属性和方法.

## 4.构造函数/原型/实例的关系🔥🔥

![638dbf35bbca87270291693ff8f7e3c](C:\Users\CICI\Desktop\tup\638dbf35bbca87270291693ff8f7e3c.png)

> 1. 构造函数.`prototype` ==> 指向了原型对象
> 2. 原型对象.constructor ==> 指回了构造函数
> 3. 实例.__proto__ ==> 指向了原型对象

构造函数和原型对象是相互指向的， 实例通过__proto__ 可以访问原型对象。

```js
function Person(name){
  this.name = name
}
const p = new Person()

// 1. 实例对象隐式原型 指向 构造函数的显示原型
console.log(p.__proto__ === Person.prototype)

// 2. Person.prototype也是一个对象， 所以，它也有__proto__ 属性

console.log(Person.prototype.__proto__ === Object.prototype)
// 以下两个都指向 Object 的原型对象
console.log(Person.prototype.__proto__)
console.log(Object.prototype)

// 3. Object.prototype 原型对象的__proto__最终指向null
Object.prototype.__proto__ === null

```

## 5 . 原型链🔥🔥

>(需背诵)
>
>1. 每个对象通过`__proto__`属性都能访问到它的原型对象，原型对象也有它的原型对象。
>2. 当访问一个对象的属性或方法时，先在自身中寻找
>3. 如果没有，就会沿着`__proto__`这条链向上查找，一直找到最顶层Object.prototype为止.(null)

![原型链](C:\Users\CICI\Desktop\tup\原型链.png)

### 5.1 原型链-查找规则

- 当访问一个对象的属性(方法)时,首先查找这个**对象自身**
- 如果没有就直接找它的原型(_proto_指向的prototype原型对象)
- 还没有找到就查找原型对象的原型(Object的原型对象)
- 以此类推一直找到Object为止(终止于null)



```js
// Person.prototype也是一个对象， 所以，它也有__proto__ 属性
console.log(Person.prototype.__proto__ === Object.prototype)
// 都指向Object的原型
console.log(Person.prototype.__proto__)
console.log(Object.prototype)
// 正常的原型链都会终止于 Object 的原型对象
// Object 原型的原型是 null
Object.prototype.__proto__ === null

```

### 5.2 数组的原型链

```js
 const arr = [1, 2, 3]  // new Array
        // 数组也是对象，它是由Array这个构造函数创造出来的
        console.log(arr.__proto__ === Array.prototype)

        // arr --->Array.prototype --->Object.prototype --->null
```

### 5.3 函数的原型链

```js
 const fn = function () { }

        // 函数也是一个对象，它是由Function构造函数创建
        // fn-- -> Function.prototype-- -> Object.prototype-- -> null
```

## 6 .instanceof

### 6.1 语法

>  A instanceof B
>
> 实例 instanceof 构造函数

### 6.2 作用

> 用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上

```JS
      function C() { }
        const o = new C()
        console.log(o.__proto__ === C.prototype)

        console.log(o instanceof C)
        console.log(o instanceof Object)

        const arr = [1, 2, 3]
        console.log(arr instanceof Array)
        console.log(arr instanceof Object)
        // console.log(arr instanceof null) // Error 
        console.log(Array instanceof Object)

        console.log(C instanceof Function)


```

### 6.3 理解

>  检测构造函数的原型， 是否出现在某个实例的原型链上。
>
>  ==> 实现原理就是只要右边变量的 prototype 在左边变量的原型链上即可

